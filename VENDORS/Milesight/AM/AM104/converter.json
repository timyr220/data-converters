{
  "name": "converter",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.deviceInfo.deviceName;\nvar deviceType = data.deviceInfo.deviceProfileName;\nvar groupName = 'IAQ devices';\n// var customerName = 'Customer A';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n//\n// In the example - bytes will be saved as HEX string and also parsed as light level, battery level and PIR sensor value.\n//\n\nfunction decodePayload(input) {\n    var output = { attributes:{}, telemetry: {} };\n    // --- Decoding code --- //\n\n    output.telemetry.HEX_bytes = bytesToHex(input);\n\n    // If the length of the input byte array is odd - we cannot parse it using the example below\n    if (input.length > 2) {\n        var i = 0;\n        while (i < input.length - 2) {\n            var channel_id = input[i];\n            i++;\n            var channel_type = input[i];\n            i++;\n            // BATTERY\n            if (channel_id === 0x01 && channel_type === 0x75) {\n                output.telemetry.battery = input[i];\n                i++;\n            }\n            // TEMPERATURE\n            if (channel_id === 0x03 && channel_type === 0x67) {\n                output.telemetry.temperature = parseBytesToInt(input, i, 2, false) / 10;\n                i += 2;\n            }\n            // HUMIDITY\n            if (channel_id === 0x04 && channel_type === 0x68) {\n                output.telemetry.humidity = input[i] / 2.0;\n                i++;\n            }\n            // HISTORY DATA\n//            if (channel_id == 0x20 && channel_type == 0xCE) {\n//                var data = {};\n//                data.timestamp = parseBytesToInt(input, i, 4, false);\n//                data.temperature = parseBytesToInt(input, i + 4, 2, false) / 10;\n//                data.humidity = input[i + 6] / 2;\n//                i += 7;\n//            \n//                if (output.telemetry.history == null) {\n//                    output.telemetry.history = [];\n//                }\n//                output.telemetry.history.add(data);\n//            }\n\n            // PIR\n            if (channel_id === 0x05 && channel_type === 0x6a) {\n                output.telemetry.activity = parseBytesToInt(input, i, 2, false);\n                i += 2;\n            }\n            // LIGHT\n            if (channel_id === 0x06 && channel_type === 0x65) {\n                output.telemetry.illumination = parseBytesToInt(input, i, 2, false);\n                output.telemetry.infrared = parseBytesToInt(input, i + 4, 2, false);\n                output.telemetry.infrared_and_visible = parseBytesToInt(input, i + 2, 2, false);\n                i += 6;\n            }\n            // CO2\n            if (channel_id === 0x07 && channel_type === 0x7d) {\n                output.telemetry.co2 = parseBytesToInt(input, i, 2, false);\n                i += 2;\n            }\n            // TVOC\n            if (channel_id === 0x08 && channel_type === 0x7d) {\n                output.telemetry.tvoc = parseBytesToInt(input, i, 2, false);\n                i += 2;\n            }\n            // PRESSURE\n            if (channel_id === 0x09 && channel_type === 0x73) {\n                output.telemetry.pressure = parseBytesToInt(input, i, 2, false) / 10;\n                i += 2;\n            } \n            // DAYLIGHT\n            else if (channel_id === 0x04 && channel_type === 0x00) {\n                output.telemetry.daylight = input[i] === 0 ? \"dark\" : \"light\";\n                i++;\n            }\n        }\n    }\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = {};\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\nvar timestamp = -1;\nif (dateString != null) {\n  timestamp = new Date(dateString).getTime();\n  if (timestamp == -1) {\n      var secondsSeparatorIndex = dateString.lastIndexOf('.') + 1;\n      var millisecondsEndIndex = dateString.lastIndexOf('+');\n      if (millisecondsEndIndex == -1) {\n          millisecondsEndIndex = dateString.lastIndexOf('Z');\n      }\n      if (millisecondsEndIndex == -1) {\n          millisecondsEndIndex = dateString.lastIndexOf('-');\n      }\n      if (millisecondsEndIndex == -1) {\n          if (dateString.length >= secondsSeparatorIndex + 3) {\n              dateString = dateString.substring(0, secondsSeparatorIndex + 3);\n          }\n      } else {\n          dateString = dateString.substring(0, secondsSeparatorIndex + 3) +\n              dateString.substring(millisecondsEndIndex, dateString.length);\n      }\n      timestamp = new Date(dateString).getTime();\n  }\n}\n// If we cannot parse timestamp - we will use the current timestamp\nif (timestamp == -1) {\n    timestamp = Date.now();\n}\n// --- Timestamp parsing\n\n// You can add some keys manually to attributes or telemetry\nattributes.deduplicationId = data.deduplicationId;\n\n// You can exclude some keys from the result\nvar excludeFromAttributesList = [\"deviceName\", \"rxInfo\", \"confirmed\", \"data\", \"deduplicationId\",\"time\", \"adr\", \"dr\", \"fCnt\"];\nvar excludeFromTelemetryList = [\"data\", \"deviceInfo\", \"txInfo\", \"devAddr\", \"adr\", \"time\", \"fPort\", \"region_common_name\", \"region_config_id\", \"deduplicationId\"];\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar telemetryData = toFlatMap(data, excludeFromTelemetryList, false);\nvar attributesData = toFlatMap(data, excludeFromAttributesList, false);\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    telemetry.putAll(customDecoding.telemetry);\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\ntelemetry.putAll(telemetryData);\nattributes.putAll(attributesData);\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n//  customerName: customerName,\n    groupName: groupName,\n    attributes: attributes,\n    telemetry: {\n        ts: timestamp,\n        values: telemetry\n    }\n};\n\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devEui",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "pir",
      "daylight",
      "confirmed",
      "gatewayId",
      "channel",
      "rfChain",
      "crcStatus"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}